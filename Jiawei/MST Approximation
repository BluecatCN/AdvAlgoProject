# coding:utf-8

import numpy as np
import math
import time
import Extrac_test_data
from Extrac_test_data import PreData

def Prim(disMat,vNum):

    prims = [] #save the path
    weights = []  # save the distance
    cover_node = [False] * vNum #already visited city

    node =0
    cover_node[node] = True
    for i in range(vNum):
        prims.append(0)
        weights.append(0)

    for i in range(1,vNum):
        weights[i] = disMat[node][i]  #copy from 1st row

    for i in range(vNum-1):  
        min_value = float("inf")
        for j in range(vNum):
            if weights[j] != min_value and weights[j]<min_value and not cover_node[j]:  
                min_value = weights[j]    #update the new min_value
                node = j
        if node != 0 :
            cover_node[node] = True
        for m in range(vNum):
            if weights[m] > disMat[node][m] and not cover_node[m]: 
                weights[m] = disMat[node][m]     #get weights from smallest element
            else: ()
            prims[i] = node        #give the node's sequence to prims[]

        weights[0]=disMat[0][prims[0]] 
    return weights, prims



#####main### C:\Users\roven\PycharmProjects\TSP_MSTAlgo

def main():

    start_time=time.time()  
    weights,prims=Prim(disMat,vNum)
    print(weights)
    print(prims)
    end_time=time.time()  
    return end_time - start_time


if __name__=='__main__':
    start_time = time.time()
    filename = 'st70.tsp'
    disMat, vNum = PreData(filename)  #get data
    weights,prims = Prim(disMat,vNum)  
    wtotal=sum(weights)   #get total weight
    print(weights)
    print(prims)
    print(wtotal)
    end_time = time.time()
    print(start_time)
    print(end_time)
    print(end_time - start_time)



