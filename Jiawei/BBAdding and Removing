# coding:utf-8

import numpy as np
import math
import time
import Extrac_test_data
from Extrac_test_data import PreData
import sys

def BandB(disMat,vNum,cover_node,i,n,upper,lowb):   #n:row.i:column. default: n=0,i=0,tot=0,upper=infinite

        tot = calculatentot(n)
        if (tot == 2 and i != 0) or i >= (vNum):  # if this row already had 2 elements been visited, visit next row
            n = n + 1
            i=n

        if n>=i and n<(vNum-1):
            i=n+1

        toti = calculatentot(i)
        if toti == 2 and i<(vNum-1):  #if this element already visited 2 times, visit the next
            i = i + 1
            if i>=(vNum):
                n = n + 1
                i = n+1

        if n >= (vNum-1):  # or lowb==upper: #因为这个算法到第vNum-1点tot=2,且第vNum点tot=1时就可以停止了
            disMat[0][0]=lowb
            return None

        cover_node[n][i]=1
        cover_node[i][n]=1
        lowl=calculatebound(cover_node)  #find the left node's bound

        cover_node[n][i]=-1
        cover_node[i][n]=-1
        lowr=calculatebound(cover_node)  #find the right node's bound

        diameter = min(disMat[n])

        if lowl<=lowr and (lowr-lowl)<diameter :
                upper=lowr  #give bigger bound to upper
                lowb=lowl
                cover_node[0][0]=lowb
                cover_node[n][i] = 1
                cover_node[i][n] = 1

        else:
            if  (lowl-lowr)<diameter and (upper-lowb)<diameter :   #distance gap
                upper=lowr
                lowb=lowl
                cover_node[0][0]=lowb
                cover_node[n][i] = 1
                cover_node[i][n] = 1

            else:
                upper = lowl
                lowb = lowr
                cover_node[0][0] = lowb
                cover_node[n][i] = -1
                cover_node[i][n] = -1
        BandB(disMat, vNum, cover_node, i+1, n, upper, lowb)

def calculatentot(n):
        k=0
        for i in range(0,vNum):
            if cover_node[n][i]==1:
                k=k+1
        return k

def calculatebound(cover_node):
        lowbound=0
        for i in range (0,vNum):
            rowmin = disMat[i].copy()
            rowmin.sort()  # Ranking the value of array elements
            for j in range (0,vNum):
                if i!=j:
                    if cover_node[i][j]==1 and disMat[i][j] != rowmin[0] and disMat[i][j] != rowmin[1]:
                        rowmin[1]=rowmin[0]
                        rowmin[0]=disMat[i][j]
                    if cover_node[i][j]==-1 and disMat[i][j]==rowmin[0]:
                        for k in range(0,vNum-1):
                            rowmin[k]=rowmin[k+1]
                    if cover_node[i][j] == -1 and disMat[i][j] == rowmin[1]:
                        for k in range(1,vNum-1):
                            rowmin[k]=rowmin[k+1]

            lowbound = lowbound + rowmin[0] + rowmin[1]

        lowbound = lowbound / 2
        return lowbound

def firsthandledisMat(disMat,vNum):
        for i in range (0,vNum):
            for j in range (0,vNum):
                if i==j:
                    disMat[i][j]=100000000
        return disMat

def diameterMat(disMat):
        d=0
        for i in range (vNum):
            for j in range (vNum):
                if disMat[i][j]>d:
                    d=disMat[i][j]
        return d


    #####main### C:\Users\roven\PycharmProjects\TSP_MSTAlgo

def main():

        start_time=time.time()
        end_time=time.time()
        return end_time - start_time

if __name__=='__main__':

        start_time = time.time()
        sys.setrecursionlimit(10000)  #make recursion's step limitation bigger
        filename = 'ulysses16.tsp'
        disMat,vNum = PreData(filename)	# get data
        disMat=firsthandledisMat(disMat,vNum)
        cover_node = [[0 for j in range (0,vNum)] for i in range (0,vNum)]  #record the statement of elements
        upper=float("inf")
        lowb=0
        n=0
        i=0
        tot=0
        BandB(disMat,vNum,cover_node, i, n, upper,lowb)
        weights=disMat[0][0]   #正确的处理方法
        print("weights list:", weights)
        print("path:", prims)
        print("total weight:", wtotal)
        end_time = time.time()
        print("time:", end_time - start_time)


